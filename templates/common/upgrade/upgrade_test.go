// Copyright 2024 The Authors (see AUTHORS file)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package upgrade

import (
	"context"
	"os"
	"path/filepath"
	"testing"
	"time"

	"github.com/benbjohnson/clock"
	"github.com/google/go-cmp/cmp"

	"github.com/abcxyz/abc/templates/common"
	"github.com/abcxyz/abc/templates/common/render"
	"github.com/abcxyz/abc/templates/common/templatesource"
	abctestutil "github.com/abcxyz/abc/templates/testutil"
	"github.com/abcxyz/pkg/testutil"
)

func TestUpgrade(t *testing.T) {
	t.Parallel()

	outTxtSaysHelloSpec := `
api_version: 'cli.abcxyz.dev/v1beta6'
kind: 'Template'

desc: 'my template'

steps:
  - desc: 'include foo.txt'
    action: 'include'
    params:
      paths: ['out.txt']
`
	outTxtSaysHelloManifest := `# Generated by the "abc templates" command. Do not modify.
api_version: cli.abcxyz.dev/v1beta6
kind: Manifest
creation_time: 2024-03-01T12:05:06.000000007Z
modification_time: 2024-03-01T12:05:06.000000007Z
template_location: ../template_dir
location_type: local_git
template_version: 5597fc600ead69ad92c81a22b58c9e551cd86b9a
template_dirhash: h1:d+JN4HzYiqk9/eTEl+OaWY0q0IzxiN1b+TIe71XkRsw=
inputs: []
output_hashes:
    - file: out.txt
      hash: h1:WJG1tSLV3whtD/CxEPvZ0hu0/HFjrzTQgoai6Eb2vgM=
`

	cases := []struct {
		name string

		// We're simulating an `abc templates render` followed by an `abc
		// templates upgrade`. origTemplateDirContents is used as the template
		// for the intitial render operation. Then, the files in
		// templateChangesForUpgrade are added to the template before executing
		// the upgrade operation.
		origTemplateDirContents       map[string]string
		templateChangesForUpgrade     map[string]string
		wantDestContentsBeforeUpgrade map[string]string
		wantDestContentsAfterUpgrade  map[string]string
		wantOK                        bool
		wantErr                       string
	}{
		// TODO(upgrade): tests to add:
		//  dirhash unchanged
		//  file hash mismatches require conflict resolution
		//  added files/dirs
		//  removed files/dirs
		//  removed files/dirs, with local modifications
		//  remote git template
		//  manifest name is preserved
		//  extra inputs needed:
		//    inputs from file
		//    inputs provided as flags
		//    prompt for inputs

		{
			name: "simple_success",
			origTemplateDirContents: map[string]string{
				"out.txt":   "hello\n",
				"spec.yaml": outTxtSaysHelloSpec,
			},
			wantOK: true,
			wantDestContentsBeforeUpgrade: map[string]string{
				"out.txt": "hello\n",
				".abc/manifest_..%2Ftemplate_dir_2024-03-01T12:05:06.000000007Z.lock.yaml": outTxtSaysHelloManifest,
			},
			templateChangesForUpgrade: map[string]string{
				"spec.yaml": `
api_version: 'cli.abcxyz.dev/v1beta6'
kind: 'Template'

desc: 'my template'

steps:
  - desc: 'include out.txt'
    action: 'include'
    params:
      paths: ['out.txt']
  - desc: 'append ", world"" to the file'
    action: 'append'
    params:
      paths: ['out.txt']
      with: 'world'`,
			},
			wantDestContentsAfterUpgrade: map[string]string{
				"out.txt": "hello\nworld\n",
				".abc/manifest_..%2Ftemplate_dir_2024-03-01T12:05:06.000000007Z.lock.yaml": `# Generated by the "abc templates" command. Do not modify.
api_version: cli.abcxyz.dev/v1beta6
kind: Manifest
creation_time: 2024-03-01T12:05:06.000000007Z
modification_time: 2024-03-01T13:05:06.000000007Z
template_location: ../template_dir
location_type: local_git
template_version: 5597fc600ead69ad92c81a22b58c9e551cd86b9a
template_dirhash: h1:IShu985DzNZWkuNWvs2VMMW1bUY8kq12Y7U+ph0PQjg=
inputs: []
output_hashes:
    - file: out.txt
      hash: h1:Sh5n8v4dHMezHQyi7EQdpHeCA6A2p32hA0TIXiT/D5I=
`,
			},
		},
		{
			name:   "short_circuit_if_already_latest_version",
			wantOK: false,
			origTemplateDirContents: map[string]string{
				"out.txt":   "hello\n",
				"spec.yaml": outTxtSaysHelloSpec,
			},
			templateChangesForUpgrade: map[string]string{},
			wantDestContentsBeforeUpgrade: map[string]string{
				"out.txt": "hello\n",
				".abc/manifest_..%2Ftemplate_dir_2024-03-01T12:05:06.000000007Z.lock.yaml": outTxtSaysHelloManifest,
			},
			wantDestContentsAfterUpgrade: map[string]string{
				"out.txt": "hello\n",
				".abc/manifest_..%2Ftemplate_dir_2024-03-01T12:05:06.000000007Z.lock.yaml": outTxtSaysHelloManifest,
			},
		},
	}

	for _, tc := range cases {
		tc := tc

		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()

			tempBase := t.TempDir()
			destDir := filepath.Join(tempBase, "dest_dir")
			manifestDir := filepath.Join(destDir, common.ABCInternalDir)
			templateDir := filepath.Join(tempBase, "template_dir")

			// Make tempBase into a valid git repo.
			abctestutil.WriteAll(t, tempBase, abctestutil.WithGitRepoAt("", nil))

			// We don't use UTC time here because we want to make sure local time
			// gets converted to UTC time before saving.
			loc, err := time.LoadLocation("America/Los_Angeles")
			if err != nil {
				t.Fatalf("time.LoadLocation(): %v", err)
			}
			clk := clock.NewMock()
			clk.Set(time.Date(2024, 3, 1, 4, 5, 6, 7, loc))

			ctx := context.Background()

			abctestutil.WriteAll(t, templateDir, tc.origTemplateDirContents)
			renderAndVerify(t, ctx, clk, tempBase, templateDir, destDir, tc.wantDestContentsBeforeUpgrade)

			clk.Add(time.Hour) // simulate time passing between initial installation and upgrade

			manifestBaseName, err := findManifest(manifestDir)
			if err != nil {
				t.Fatal(err)
			}

			params := &Params{
				Clock:              clk,
				CWD:                destDir,
				FS:                 &common.RealFS{},
				ManifestPath:       filepath.Join(manifestDir, manifestBaseName),
				Stdout:             os.Stdout,
				AllowDirtyTestOnly: true,
			}

			// Now create the "new" template that we'll upgrade to. This is
			// implemented as a patch over the previous version.
			abctestutil.WriteAll(t, templateDir, tc.templateChangesForUpgrade)

			ok, err := Upgrade(ctx, params)
			if diff := testutil.DiffErrString(err, tc.wantErr); diff != "" {
				t.Fatal(diff)
			}

			if ok != tc.wantOK {
				t.Errorf("got ok=%t, want %t", ok, tc.wantOK)
			}

			gotInstalledDirContentsAfter := abctestutil.LoadDir(t, destDir)
			if diff := cmp.Diff(gotInstalledDirContentsAfter, tc.wantDestContentsAfterUpgrade); diff != "" {
				t.Errorf("installed directory contents after upgrading were not as expected (-got,+want): %s", diff)
			}
		})
	}
}

func renderAndVerify(tb testing.TB, ctx context.Context, clk clock.Clock, tempBase, templateDir, destDir string, wantContents map[string]string) {
	tb.Helper()

	downloader, err := templatesource.ParseSource(ctx, &templatesource.ParseSourceParams{
		AllowDirtyTestOnly: true,
		CWD:                tempBase,
		Source:             templateDir,
	})
	if err != nil {
		tb.Fatal(err)
	}

	if err := render.Render(ctx, &render.Params{
		Clock:       clk,
		Cwd:         tempBase,
		DestDir:     destDir,
		Downloader:  downloader,
		FS:          &common.RealFS{},
		Manifest:    true,
		OutDir:      destDir,
		TempDirBase: tempBase,
	}); err != nil {
		tb.Fatal(err)
	}

	got := abctestutil.LoadDir(tb, destDir)
	if diff := cmp.Diff(got, wantContents); diff != "" {
		tb.Fatalf("installed directory contents before upgrading were not as expected, there's something wrong with test setup (-got,+want): %s", diff)
	}
}
